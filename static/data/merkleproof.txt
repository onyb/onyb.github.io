import * as lib from "./merkletrees"

/**
 * Type declarations
 */

/**
 * MerkleProof represents a blob of data that can be used to efficiently
 * verify if a given transaction is part of a Merkle tree.
 *
 * It has the following use cases:
 *   - check if data belongs to Merkle tree.
 *   - concisely prove the validity of data being part of a dataset without
 *     storing the whole dataset.
 */
type MerkleProof = [number, lib.ChainHash][]

/**
 * Helper functions
 */
const random = arr => arr[Math.floor(Math.random() * arr.length)]

/**
 * Generate a Merkle proof containing the data required to reconstruct the
 * Merkle root from a given transaction hash.
 *
 * It provides a list of partial proofs required to obtain the Merkle tree
 * parent.
 *
 * [number, lib.ChainHash]
 *    ^ index     ^ merkle branch to hash with
 *
 * index may be 0 or 1, depending on whether the merkle branch to hash
 * with is the left node or right node, respectively.
 *
 *      parent
 *       / \
 *      /  \      => partial proof is [1, abcdef]
 *    tx  abcdef
 */
const generateMerkleProof = (
  txs: lib.ChainHash[],
  tx: lib.ChainHash,
  proof: MerkleProof = []
): MerkleProof => {
  if (txs.length === 1) {
    return proof
  }

  const tree: lib.ChainHash[] = []

  lib.toPairs(txs).forEach(pair => {
    const hash = lib.hashMerkleBranches(pair)

    if (pair.includes(tx)) {
      // If transaction hash is the left node, the proof should contain the
      // right node.
      const idx = pair[0] === tx ? 1 : 0
      proof.push([idx, pair[idx]])
      tx = hash
    }

    tree.push(hash)
  })

  return generateMerkleProof(tree, tx, proof)
}

/**
 * Evaluate a Merkle proof for a given transaction hash, to obtain the Merkle
 * root.
 */
const getMerkleRootFromProof = (
  proof: MerkleProof,
  tx: lib.ChainHash
): lib.ChainHash =>
  proof.reduce(
    (root, [idx, hash]) =>
      idx === 0
        ? lib.hashMerkleBranches([hash, root])
        : lib.hashMerkleBranches([root, hash]),
    tx
  )

const driver = async () => {
  const blockHash = await lib.getBestBlockHash()
  console.log(`Best block hash: ${blockHash.toString()}`)

  const block = await lib.getBlock(blockHash)
  const want = block.merkleRoot.toString()
  console.log(`Merkle root: ${want}`)
  console.log(`Transactions:`)
  console.dir(
    block.transactions.map(tx => tx.toString()),
    { maxArrayLength: 5 }
  )

  const randomTx = random(block.transactions)
  console.log(`\nMerkle proof for transaction: ${randomTx.toString()}`)

  const proof = generateMerkleProof(block.transactions, randomTx)
  console.dir(
    proof.map(([idx, hash]) => [idx, hash.toString()]),
    { maxArrayLength: 5 }
  )

  const got = getMerkleRootFromProof(proof, randomTx).toString()

  got === want
    ? console.log("✓ Merkle proof is valid.")
    : console.error(`✖ Merkle proof is invalid. got=${got} want=${want}`)
}

// driver()
